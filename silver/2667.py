# 2667. 단지번호붙이기

# 문제
# <그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. <그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.
#
# 입력
# 첫 번째 줄에는 지도의 크기 N(정사각형이므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고, 그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.
#
# 출력
# 첫 번째 줄에는 총 단지수를 출력하시오. 그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.

########################################################################################################


# 해당 단지를 탐색하는 DFS
def DFS(i, j):
    global cnt

    # 일단 시작하는 곳을 단지를 정의하고,
    # 방문을 체크한다.
    g[i][j] = cnt
    visited[i][j] = 1

    di = [-1, 1, 0, 0] # 상하좌우
    dj = [0, 0, -1, 1] # 탐색할 영역

    stack = [[i, j]] # DFS이므로 stack 사용
    while stack: # stack이 존재하는동안 반복
        a, b = stack.pop()
        for i in range(4): # 4방향 탐색
            x = a + di[i]
            y = b + dj[i]
            # 밑의 if문 두개는 붙여도 되지만, 직관적이지 못해 따로 작성
            if -1 < x < n and -1 < y < n: # 지도 안에서 탐색
                # 집이 있는 곳 + 방문하지 않은 곳
                if g[x][y] == 1 and visited[x][y] == 0:
                    visited[x][y] = 1 # 방문체크를 하고 다음 좌표로 넘어감.
                    DFS(x, y)

n = int(input())

# 입력을 기반으로 행렬 생성
g = [list(map(int, input())) for i in range(n)]

# 방문 유무를 체크하는 visited
visited = [[0] * n for i in range(n)]


cnt = 1 # 아파트 단지 번호
# 모든 집이 있는 구간을 살핀다.
for i in range(n):
    for j in range(n):
        # 방문한 적이 없고, 집이 있는 곳이라면..!
        if visited[i][j] == 0 and g[i][j] == 1:
            # 그 집을 시작으로 DFS 함수를 실행한다.
            DFS(i, j)
            # 해당 단지에 대한 탐색이 끝났으면 다음 단지를 찾는다.
            cnt += 1

# cnt =+ 1를 하고 끝나 단지수보다 1개가 더 많으므로
print(cnt - 1)

answer = [] # 집의 수를 오름차순으로 꺼내기 위해
for k in range(1 ,cnt): # 단지 번호수 집의 수를 출력하기 위해
    total = 0
    for i in range(n):
        for j in range(n):
            if g[i][j] == k:
                total += 1
    answer.append(total)

answer.sort() # 정렬하고 오름차순으로 출력
for i in answer:
    print(i)