# 1388. 바닥 장식

# 문제
# 형택이는 건축가이다. 지금 막 형택이는 형택이의 남자 친구 기훈이의 집을 막 완성시켰다. 형택이는 기훈이 방의 바닥 장식을 디자인했고, 이제 몇 개의 나무 판자가 필요한지 궁금해졌다. 나무 판자는 크기 1의 너비를 가졌고, 양수의 길이를 가지고 있다. 기훈이 방은 직사각형 모양이고, 방 안에는 벽과 평행한 모양의 정사각형으로 나누어져 있다.
# 이제 ‘-’와 ‘|’로 이루어진 바닥 장식 모양이 주어진다. 만약 두 개의 ‘-’가 인접해 있고, 같은 행에 있다면, 두 개는 같은 나무 판자이고, 두 개의 ‘|’가 인접해 있고, 같은 열에 있다면, 두 개는 같은 나무 판자이다.
# 기훈이의 방 바닥을 장식하는데 필요한 나무 판자의 개수를 출력하는 프로그램을 작성하시오.
#
# 입력
# 첫째 줄에 방 바닥의 세로 크기N과 가로 크기 M이 주어진다. 둘째 줄부터 N개의 줄에 M개의 문자가 주어진다. 이것은 바닥 장식 모양이고, '-‘와 ’|‘로만 이루어져 있다. N과 M은 50 이하인 자연수이다.
#
# 출력
# 첫째 줄에 문제의 정답을 출력한다.

####################################################################################################

# 1. 플랜
# 인접한 판자의 모양을 판별해야 하므로 BFS를 사용해야 되겠다고 생각
# + 현재 내가 보고 있는 판자와 주변의 판자가 다르면
# cnt를 상승시키는 방향으로 짜보려고 생각함.
# 모든 판자를 체크하기만 하면 되므로
# 0,0에서 출발하여
# 움직이는 방향은 오른쪽과 밑만 체크하면 될 것 같다.
# 틀림.

# 2. 플랜
# 가로와 세로를 따로 체크하는 방식.
# 각 행과열을 전부 체크하면서. 이전과 다른 타일이 나오면 count를 늘리는 방식

# 1번 풀이
from pprint import pprint
# def BFS(cnt):
#     global g
#     di = [1, 0]
#     dj = [0, 1]
#
#     queue = [[0, 0]]
#     while queue:
#         a, b = queue.pop(0)
#         for i in range(2):
#             x = a + di[i]
#             y = b + dj[i]
#             if -1 < x < n and -1 < y < m:
#                 if g[x][y] != g[a][b]:
#                     cnt += 1
#                     queue.append([x, y])
#                 else:
#                     queue.append([x, y])
#     return cnt
#
# n, m = map(int, input().split())
# g = [list(input()) for i in range(n)]
# print(BFS(1))


# 2번 풀이
# 행에서 | 이 나올 경우 cnt +1, 열에서 - 가 나올경우 cnt +1
n, m = map(int, input().split())
g = [list(input()) for i in range(n)]

cnt = 0
for i in range(n):
    pre = "/"
    for j in range(m):
        if g[i][j] == "-":
            if g[i][j] != pre:
                cnt += 1
        pre = g[i][j]

for i in range(m):
    pre = "/"
    for j in range(n):
        if g[j][i] == "|":
            if g[j][i] != pre:
                cnt += 1
        pre = g[j][i]

print(cnt)






























