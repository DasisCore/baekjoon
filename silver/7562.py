# 7562. 나이트의 이동

# 문제
# 체스판 위에 한 나이트가 놓여져 있다. 나이트가 한 번에 이동할 수 있는 칸은 아래 그림에 나와있다. 나이트가 이동하려고 하는 칸이 주어진다. 나이트는 몇 번 움직이면 이 칸으로 이동할 수 있을까?
#
# 입력
# 입력의 첫째 줄에는 테스트 케이스의 개수가 주어진다.
# 각 테스트 케이스는 세 줄로 이루어져 있다. 첫째 줄에는 체스판의 한 변의 길이 l(4 ≤ l ≤ 300)이 주어진다. 체스판의 크기는 l × l이다. 체스판의 각 칸은 두 수의 쌍 {0, ..., l-1} × {0, ..., l-1}로 나타낼 수 있다. 둘째 줄과 셋째 줄에는 나이트가 현재 있는 칸, 나이트가 이동하려고 하는 칸이 주어진다.
#
# 출력
# 각 테스트 케이스마다 나이트가 최소 몇 번만에 이동할 수 있는지 출력한다.

##########################################################################################\

# 목표지점까지 이동하는 것이므로 DFS사용을 해보려고 하다가
# 해당위치의 방문 유무가 중요하지 않으므로 queue이용한 
# BFS로 전환

from collections import deque

def BFS(i, j):
    global g
    
    # 나이트의 이동 가능 위치
    di = [-1, -2, -2, -1, 1, 2, 2, 1] # 8방향
    dj = [-2, -1, 1, 2, 2, 1, -1, -2]
    
    queue = deque()
    queue.append([i, j])

    while queue:
        a, b = queue.popleft()
        
        # 목표위치 도달시 해당 위치의 값을 출력하고 함수를 끝냄
        if a == o and b == k:
            print(g[a][b])
            return

        for i in range(8):
            x = a + di[i]
            y = b + dj[i]
            if -1 < x < l and -1 < y < l and g[x][y] == 0:
                g[x][y] = g[a][b] + 1
                queue.append([x, y])



T = int(input())
for _ in range(T):
    l = int(input())
    g = [[0] * l for i in range(l)]
    
    # 출발 위치
    i, j = map(int, input().split())
    #목표 위치
    o, k = map(int, input().split())
    BFS(i, j)


