# 4963. 섬의 개수

# 문제
# 정사각형으로 이루어져 있는 섬과 바다 지도가 주어진다. 섬의 개수를 세는 프로그램을 작성하시오.
# 한 정사각형과 가로, 세로 또는 대각선으로 연결되어 있는 사각형은 걸어갈 수 있는 사각형이다.
# 두 정사각형이 같은 섬에 있으려면, 한 정사각형에서 다른 정사각형으로 걸어서 갈 수 있는 경로가 있어야 한다. 지도는 바다로 둘러싸여 있으며, 지도 밖으로 나갈 수 없다.
#
# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스의 첫째 줄에는 지도의 너비 w와 높이 h가 주어진다. w와 h는 50보다 작거나 같은 양의 정수이다.
# 둘째 줄부터 h개 줄에는 지도가 주어진다. 1은 땅, 0은 바다이다.
# 입력의 마지막 줄에는 0이 두 개 주어진다.
#
# 출력
# 각 테스트 케이스에 대해서, 섬의 개수를 출력한다.

###################################################################################################

# 섬의 개수를 세는 프로그램
# 상하좌우 이외에도 대각선으로도 이동할 수 있으므로
# 8방 탐색을 하면 된다고 생각함. + DFS

def DFS(i, j):
    global visited

    stack = [[i, j]]
    visited[i][j] = 1

    di = [-1, -1, -1, 0, 0, 1, 1, 1]  # 왼쪽 위부터 8방 탐색
    dj = [-1, 0, 1, -1, 1, -1, 0, 1]

    while stack:
        a, b = stack.pop()
        for i in range(8):
            x = a + di[i]
            y = b + dj[i]
            if -1 < x < h and -1 < y < w:
                if visited[x][y] == 0 and g[x][y] == 1:
                    visited[x][y] = 1
                    stack.append([x, y])

# 0 0 이 나올때까지 계속해서 계산을 반복해야 하므로
# while문을 이용한다.
while True:
    w, h = map(int, input().split())
    
    # 정지 조건
    if w == 0 and h == 0:
        break

    # 섬 표시
    g = [list(map(int, input().split())) for i in range(h)]
    visited = [[0] * w for _ in range(h)]

    cnt = 0
    for i in range(h):
        for j in range(w):
            if visited[i][j] == 0 and g[i][j] == 1:
                DFS(i, j)
                cnt += 1

    print(cnt)
